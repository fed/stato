{"version":3,"file":"stato.js","sources":["../src/index.js"],"sourcesContent":["import Bacon from 'baconjs';\nimport flatten from 'lodash/flatten'; // @TODO: remove dep\n\n// Store\nconst _busCache = {};\n\nexport default class Store {\n  constructor(reducers, initialState) {\n    this.reducers = reducers;\n    this.initialState = initialState;\n  }\n\n  stream(name) {\n    return this.bus(name);\n  }\n\n  push(name, value) {\n    this.bus(name).push(value);\n  }\n\n  plug(name, value) {\n    this.bus(name).plug(value);\n  }\n\n  bus(name) {\n    return _busCache[name] = _busCache[name] || new Bacon.Bus();\n  }\n\n  // bind Action Creators to Reducers and subscribe to changes\n  subscribe(cb) {\n    const actionTypes = Object.keys(this.reducers);\n    const boundActions = actionTypes.map(actionType => [\n      [this.stream(actionType)], this.reducers[actionType]\n    ]);\n\n    // @TODO: instead of using initial state, force the reducers to run once\n    // and read data from the store = initial state\n    // merge it with another stream to emit once and instantly\n    return Bacon\n      .update(this.initialState, ...flatten(boundActions))\n      .onValue(state => {\n        console.log('state', state);\n        cb(state);\n      });\n  }\n}\n"],"names":["_busCache","Store","reducers","initialState","name","this","bus","value","push","plug","Bacon","Bus","cb","boundActions","Object","keys","map","_this","stream","actionType","update","flatten","onValue","log","state"],"mappings":"qtDAIMA,aAEeC,4BACPC,EAAUC,+BACfD,SAAWA,OACXC,aAAeA,qDAGfC,UACEC,KAAKC,IAAIF,gCAGbA,EAAMG,QACJD,IAAIF,GAAMI,KAAKD,gCAGjBH,EAAMG,QACJD,IAAIF,GAAMK,KAAKF,+BAGlBH,UACKJ,UAAUI,GAAQJ,UAAUI,IAAS,IAAIM,MAAMC,sCAI9CC,cAEFC,EADcC,OAAOC,KAAKV,KAAKH,UACJc,IAAI,oBAClCC,EAAKC,OAAOC,IAAcF,EAAKf,SAASiB,aAMpCT,MACJU,oBAAOf,KAAKF,uCAAiBkB,QAAQR,MACrCS,QAAQ,oBACCC,IAAI,QAASC,KAClBA"}